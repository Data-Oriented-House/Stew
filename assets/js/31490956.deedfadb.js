"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[502],{55419:e=>{e.exports=JSON.parse('{"functions":[{"name":"add","desc":"Adds the factory\'s type of component to the entity. If the component already exists, it just returns the old component and does not perform any further changes.\\n\\nAnything can be an Entity, if an unregistered object is given a component it is registered as an entity.\\n\\nFires the world and factory `added` callbacks.\\n\\n```lua\\nlocal World = require(path.to.world)\\nlocal Move = require(path.to.move.factory)\\nlocal Chase = require(path.to.chase.factory)\\nlocal Model = require(path.to.model.factory)\\n\\nlocal enemy = World.entity()\\nModel.add(enemy)\\nMove.add(enemy)\\nChase.add(enemy)\\n\\n-- continues to below example\\n```\\n\\t\\t","params":[{"name":"entity","desc":"","lua_type":"any"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Component"}],"function_type":"static","source":{"line":314,"path":"src/init.lua"}},{"name":"remove","desc":"Removes the factory\'s type of component from the entity. If the entity is unregistered, nothing happens.\\n\\nFires the world and factory `removed` callbacks.\\n\\n```lua\\n-- continued from above example\\n\\ntask.wait(5)\\n\\nChase.remove(entity)\\nMove.remove(entity)\\n```\\n\\t\\t","params":[{"name":"entity","desc":"","lua_type":"any"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"void?"}],"function_type":"static","source":{"line":367,"path":"src/init.lua"}}],"properties":[],"types":[],"name":"Factory","desc":"Factories are little objects responsible for adding and removing their specific type of component from entities. They are also used to access their type of component from entities and queries. They are well, component factories!\\n\\t\\t","source":{"line":276,"path":"src/init.lua"}}')}}]);